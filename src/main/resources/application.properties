# 应用名称
spring.application.name=shadingjdbc

#指定当前应用的所有数据源标识（由于后期可能会涉及到多个数据源，或读写分离等，这里要为每个数据源
# 起一个标识名，然后为每个数据源具体配置）
spring.shardingsphere.datasource.names=d1
#配置d1这个数据源，由于这里是水平分表，所以只需要一个数据源即可 其中d1代表该数据源的一个标识
spring.shardingsphere.datasource.d1.type=com.alibaba.druid.pool.DruidDataSource
#指定链接驱动
spring.shardingsphere.datasource.d1.driver-class-name=com.mysql.jdbc.Driver
#指定链接url
spring.shardingsphere.datasource.d1.url=jdbc:mysql://new2.mysql.tuling.com:3306/test?useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
#指定链接用户名
spring.shardingsphere.datasource.d1.username=appuser
#指定链接密码
spring.shardingsphere.datasource.d1.password=appuser123

#由于是水平分表，所以会涉及到多张相同的表，这里指定这些表的分布情况:在哪个数据源上，以及一共有几张表
#指定在d1数据源，且有user_1和user_2两张表
#$->{1..2}该表达式是与前面的user_相拼接的，不能乱写，例如我们现在的两张表名是user_1和user_2，那这里就是user_$->{1..2}
#如果我们分布了3张表 user_5,user_6,user_7，那这里就是user_$->{5..6..7}
spring.shardingsphere.sharding.tables.user.actual-data-nodes=d1.user_$->{1..2}

# 指定 user 表里面主键id 以及id的生成策略 SNOWFLAKE:表示用雪花算法生成该id
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE

# 指定分片策略 约定 id 值偶数添加到 user_1 表，如果 id 是奇数添加到 user_2表
#指定要根据哪个字段进行分表，这里根据id进行分表
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
#执行分表的规则：注意这里是$->{id% 2 + 1}，由于偶数%2的结果为0，但是我们并没有user_0这样表
#所以我们要在取模的结果上+1 这样就实现了如果是偶数那么取模的结果就是user_1，如果是奇数就是user_2
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id% 2 + 1}

#开启sql 输出日志
spring.shardingsphere.props.sql.show=true
# 由于一个实体类对应两张表，所以会产生覆盖操作，加上这个配置解决覆盖问题
spring.main.allow-bean-definition-overriding=true

